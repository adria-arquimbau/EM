@page "/event-detail-organizer/{EventId:guid}"

@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Registration
@using EventsManager.Client.Components.Event
@using Microsoft.AspNetCore.Authorization

@inject HttpClient Http
@inject IToastService ToastService

@attribute [Authorize(Roles = "Organizer, Staff")]

<h3 class="mb-4">Event @eventDetail?.Name</h3>

<div class="btn-group mb-4" role="group" aria-label="View options">
    <button type="button" class="btn @(currentComponent == PageComponent.EventDetail ? "btn-primary" : "btn-outline-primary")" @onclick="(() => SetCurrentComponent(PageComponent.EventDetail))">Event Detail</button>
    <button type="button" class="btn @(currentComponent == PageComponent.RegistrationList ? "btn-primary" : "btn-outline-primary")" @onclick="(() => SetCurrentComponent(PageComponent.RegistrationList))">Registrations</button>
    <button type="button" class="btn @(currentComponent == PageComponent.RegistrationRolePasswords ? "btn-primary" : "btn-outline-primary")" @onclick="(() => SetCurrentComponent(PageComponent.RegistrationRolePasswords))">Registrations role passwords</button>
    <button type="button" 
            class="btn @(currentComponent == PageComponent.Price ? "btn-primary" : "btn-outline-primary")"
            @onclick="(() => SetCurrentComponent(PageComponent.Price))" 
            disabled="@eventDetail?.IsFree">
        Price
    </button>
    <button type="button" class="btn @(currentComponent == PageComponent.Tickets ? "btn-primary" : "btn-outline-primary")" @onclick="(() => SetCurrentComponent(PageComponent.Tickets))">Tickets</button>
    @if (iAmTheCreator)
    {
        <button type="button" class="btn @(currentComponent == PageComponent.OwnersManagement ? "btn-primary" : "btn-outline-primary")" @onclick="(() => SetCurrentComponent(PageComponent.OwnersManagement))">Owners Management</button>
    }
    <button type="button" class="btn @(currentComponent == PageComponent.Files ? "btn-primary" : "btn-outline-primary")" @onclick="(() => SetCurrentComponent(PageComponent.Files))">Files</button>
</div>

@if (eventDetail == null)
{
    <LoadingSpinner />
}
else
{
    @switch (currentComponent)
        {
            case PageComponent.EventDetail:
                <MyEventDetail Event="eventDetail" ToggleEditMode="ToggleEditMode" HandleValidSubmit="HandleValidSubmit" />
                break;
            case PageComponent.RegistrationList:
                <RegistrationList EventId="@EventId" />
                break;
            case PageComponent.RegistrationRolePasswords:
                <RegistrationRolePasswordsEdit MyEventDto="@eventDetail" RefreshEvent="LoadEventDetail" />
                break;
            case PageComponent.Price:
                <PriceEdit MyEventDto="@eventDetail" RefreshEvent="LoadEventDetail" />
                break;
            case PageComponent.OwnersManagement:
                <OwnersManager MyEventDto="@eventDetail" RefreshEvent="LoadEventDetail" />
                break;
            case PageComponent.Tickets:
                <TicketsManager EventId="@eventDetail.Id"/>
                break;
            case PageComponent.Files:
                <FilesManager EventId="@eventDetail.Id"/>
                break;
            // Add more cases as necessary
        }

        @if (isEditMode)
        {
            <MyEventEdit EventDetail="eventDetail" ToggleEditMode="ToggleEditMode" HandleValidSubmit="HandleValidSubmit" />
        }
}

@code {
    public enum PageComponent
    {
        EventDetail,
        RegistrationList,
        RegistrationRolePasswords,
        Price,
        OwnersManagement,
        Tickets,
        Files
    }

    [Parameter]
    public Guid? EventId { get; set; }

    private MyEventDto eventDetail;
    private bool isEditMode;
    private bool iAmTheCreator;
    private PageComponent currentComponent = PageComponent.EventDetail;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventDetail();
        var response = await Http.GetAsync($"Event/{EventId}/am-i-the-creator");
        if (response.IsSuccessStatusCode)
        {
            iAmTheCreator = true;
        }
    }

    private async Task LoadEventDetail()
    {
        eventDetail = await Http.GetFromJsonAsync<MyEventDto>($"Event/{EventId}-organizer");
    }

    private void SetCurrentComponent(PageComponent component)
    {
        currentComponent = component;
    }

    private async Task ToggleEditMode()
    {
        isEditMode = !isEditMode;

        // If we are exiting edit mode, reload the event detail to discard any changes made
        if (!isEditMode)
        {
            await LoadEventDetail();
        }
    }
    
    private async Task HandleValidSubmit(MyEventDto updatedEvent)
    {
        var response = await Http.PutAsJsonAsync($"Event", eventDetail);
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadAsStringAsync();
            ToastService.ShowError(error);
        }
        
        await LoadEventDetail();
        isEditMode = false;
    }
}
