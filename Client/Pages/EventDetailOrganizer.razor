@page "/event-detail-organizer/{EventId:guid}"

@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Registration
@using EventsManager.Client.Components.Loaders
@using EventsManager.Client.Components.Event
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http

@attribute [Authorize(Roles = "User")]

<h3 class="mb-4">Event @eventDetail?.Name</h3>

<div class="btn-group mb-4" role="group" aria-label="View options">
    <button type="button" class="btn @(currentComponent == PageComponent.EventDetail ? "btn-primary" : "btn-outline-primary")" @onclick="(() => SetCurrentComponent(PageComponent.EventDetail))">Event Detail</button>
    <button type="button" class="btn @(currentComponent == PageComponent.RegistrationList ? "btn-primary" : "btn-outline-primary")" @onclick="(() => SetCurrentComponent(PageComponent.RegistrationList))">Registrations</button>
    <!-- Add more buttons as necessary -->
</div>

@if (eventDetail == null)
{
    <LoadingSpinner />
}
else
{
    @switch (currentComponent)
        {
            case PageComponent.EventDetail:
                <MyEventDetail Event="eventDetail" ToggleEditMode="ToggleEditMode" />
                break;
            case PageComponent.RegistrationList:
                <FluentDivider></FluentDivider>
                <RegistrationList EventId="@EventId" />
                break;
            // Add more cases as necessary
        }

        @if (isEditMode)
        {
            <EventEdit EventDetail="eventDetail" ToggleEditMode="ToggleEditMode" HandleValidSubmit="HandleValidSubmit" />
        }
    
}

@code {
    public enum PageComponent
    {
        EventDetail,
        RegistrationList
        // Add more components as necessary
    }

    [Parameter]
    public Guid? EventId { get; set; }

    private MyEventDto eventDetail;
    private bool isEditMode;
    private PageComponent currentComponent = PageComponent.EventDetail;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventDetail();
    }

    private async Task LoadEventDetail()
    {
        eventDetail = await Http.GetFromJsonAsync<MyEventDto>($"Event/{EventId}-organizer");
    }

    private void SetCurrentComponent(PageComponent component)
    {
        currentComponent = component;
    }

    private async Task ToggleEditMode()
    {
        isEditMode = !isEditMode;

        // If we are exiting edit mode, reload the event detail to discard any changes made
        if (!isEditMode)
        {
            await LoadEventDetail();
        }
    }
    
    private async Task HandleValidSubmit(MyEventDto updatedEvent)
    {
        await Http.PutAsJsonAsync($"Event", eventDetail);
        await LoadEventDetail();
        isEditMode = false;
    }
}
