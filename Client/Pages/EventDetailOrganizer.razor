@page "/event-detail-organizer/{EventId:guid}"

@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Registration
@using EventsManager.Client.Components.Event
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http

@attribute [Authorize(Roles = "Organizer")]

<PageTitle>Event @eventDetail?.Name</PageTitle>

@if (eventDetail == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EventOrganizerDetail Event="eventDetail" ToggleEditMode="ToggleEditMode" />
    <FluentDivider></FluentDivider>
    <RegistrationList EventId="@EventId" />
}

@if (isEditMode)
{
    <EventEdit EventDetail="eventDetail" ToggleEditMode="ToggleEditMode" HandleValidSubmit="HandleValidSubmit" />
}

@code {
    [Parameter]
    public Guid? EventId { get; set; }

    private MyEventDto eventDetail;
    private bool isEditMode;

    protected override async Task OnInitializedAsync()
    {
        eventDetail = await Http.GetFromJsonAsync<MyEventDto>($"Event/{EventId}-organizer");
    }

    private async Task ToggleEditMode()
    {
        eventDetail = await Http.GetFromJsonAsync<MyEventDto>($"Event/{EventId}-organizer");
        isEditMode = !isEditMode;
    }
    
    private async Task HandleValidSubmit(MyEventDto updatedEvent)
    {
        await Http.PutAsJsonAsync($"Event", eventDetail);
        eventDetail = await Http.GetFromJsonAsync<MyEventDto>($"Event/{EventId}-organizer");
        isEditMode = false;
    }
}
