@page "/ticket-chat/{RegistrationId:guid}/event/{EventId:guid}"

@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Requests

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IToastService ToastService

<div class="container my-4">
    <h3 class="mb-3">My tickets for event @EventId</h3>

    @if (_tickets == null)
    {
        <LoadingSpinner></LoadingSpinner>
    }
    else
    {
        @foreach (var ticket in _tickets)
        {
              <div class="card mb-3">
                  <div class="card-header" @onclick="() => ToggleCard(ticket.Id)" style="cursor: pointer;">
                      <h5 class="card-title">
                          <i class="bi @(ticket.Solved ? "bi-check-circle-fill text-success" : "bi-exclamation-circle-fill text-danger")"></i>
                          @ticket.Title
                      </h5>
                      <p class="card-text">@ticket.CreationDate.ToLocalTime().ToLongDateString() at @ticket.CreationDate.ToLocalTime().ToShortTimeString()</p>
                  </div>
                  @if (_expandedTicketId == ticket.Id)
                  {
                       <div class="card-body">
                    <p>@ticket.Text</p>
                    <FluentDivider></FluentDivider>
                    <div class="chat-box">
                        @foreach (var response in ticket.TicketResponses)
                        {
                            @if (response.IsAdminResponse)
                            {
                                <div class="d-flex justify-content-end">
                                    <div class="alert alert-primary" style="background-color: #D9EFFF; border: 1px solid #3C90DF;">
                                        <p><strong>@response.RespondedBy (Admin)</strong> (@response.ResponseDate.ToLocalTime().ToString("dd MMMM, yyyy - h:mm tt")): @response.Text</p>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-start">
                                    <div class="alert alert-secondary">
                                        <p><strong>@response.RespondedBy</strong> (@response.ResponseDate.ToLocalTime().ToString("dd MMMM, yyyy - h:mm tt")): @response.Text</p>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    
                    @if (ticket.TicketResponses.LastOrDefault()?.IsAdminResponse == true && !ticket.Solved)
                    {
                        <div class="input-group">
                            <textarea id="responseText" class="form-control" @bind="_responseText"></textarea>
                            <div class="input-group-append">
                                <button class="btn btn-primary" @onclick="() => RespondToTicket(ticket.Id)">Send</button>
                            </div>
                        </div>
                    }

                    @if (ticket.Solved)
                    {
                        <p class="card-text text-success">Solved by: @ticket.SolvedBy on @ticket.SolvedDate.Value.ToLocalTime().ToString("g")</p>
                    }
                    else
                    {
                        <p class="card-text text-danger">Not solved yet, wait for the admin response...</p>
                    }
                </div>
                  }
              </div>
        }
    }

    @if (_allTicketsSolved)
    {
        <FluentDivider></FluentDivider>
        <div class="mt-4">
            <h4>Create a new Ticket:</h4>
            <div class="ticket-form">
                <div class="form-group">
                    <label for="ticketTitle">Title:</label>
                    <input id="ticketTitle" type="text" class="form-control" @bind="_newTicket.Title" />
                </div>

                <div class="form-group">
                    <label for="ticketText">Explanation:</label>
                    <textarea id="ticketText" class="form-control" rows="5" @bind="_newTicket.Text"></textarea>
                </div>

                <button class="btn btn-primary" @onclick="CreateTicket">Create Ticket</button>
            </div>
        </div>
    }

    <button class="btn btn-secondary mt-3" @onclick="NavigateToEvent">Back to event</button>
</div>

@code {
    [Parameter]
    public Guid RegistrationId { get; set; }
    [Parameter]
    public Guid EventId { get; set; }
    private List<TicketDto>? _tickets;
    private Guid _expandedTicketId = Guid.Empty;
    private bool _allTicketsSolved;
    private string _responseText = string.Empty;
    private TicketDto _newTicket = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshTickets();
    }

    private async Task RefreshTickets()
    {
        try
        {
            _tickets = await Http.GetFromJsonAsync<List<TicketDto>>($"Registration/{RegistrationId}/ticket");
            _allTicketsSolved = _tickets.All(t => t.Solved);
        }
        catch (Exception e)
        {
            ToastService.ShowError("Something went wrong, please try again later");
        }
    }

    private async Task CreateTicket()
    {
        if (!string.IsNullOrWhiteSpace(_newTicket.Title) && !string.IsNullOrWhiteSpace(_newTicket.Text))
        {
            var request = new TicketRequest()
            {
                Title = _newTicket.Title,
                Text = _newTicket.Text
            };
            
            try
            {
                var response = await Http.PostAsJsonAsync($"Registration/{RegistrationId}/ticket", request);
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Ticket created");
                    await RefreshTickets();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later");
            }
            _newTicket = new TicketDto();
        }
    }
    
    private async Task RespondToTicket(Guid ticketId)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"Registration/ticket/{ticketId}/response", new TicketResponseRequest
            {
                Text = _responseText
            });
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Response sent.");
                await RefreshTickets();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later");
        }

        _responseText = string.Empty;
    }
    
    private void ToggleCard(Guid ticketId)
    {
        _expandedTicketId = _expandedTicketId == ticketId ? Guid.Empty : ticketId;
    }


    private void NavigateToEvent()
    {
        NavigationManager.NavigateTo($"event-detail/{EventId}");
    }
}
