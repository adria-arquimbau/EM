@page "/ticket-chat/{RegistrationId:guid}/event/{EventId:guid}"
@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Requests

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IToastService ToastService

<div class="container my-4">
    <h3 class="mb-3">Create Ticket</h3>

    @if (_tickets == null)
    {
        <LoadingSpinner></LoadingSpinner>
    }
    else
    {
        @foreach (var ticket in _tickets)
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="card-title">@ticket.Title</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">@ticket.Text</p>
                    <p class="card-text">Creation Date: @ticket.CreationDate</p>
                    @if (ticket.Solved)
                    {
                        <p class="card-text text-success">Solved by: @ticket.SolvedBy on @ticket.SolvedDate</p>
                    }
                    else
                    {
                        <p class="card-text text-danger">Not solved yet</p>
                    }
                </div>
            </div>
        }
    }

    @if (_allTicketsSolved)
    {
        <div class="mt-4">
            <h4>Create a new Ticket:</h4>
            <div class="ticket-form">
                <div class="form-group">
                    <label for="ticketTitle">Title:</label>
                    <input id="ticketTitle" type="text" class="form-control" @bind="_newTicket.Title" />
                </div>

                <div class="form-group">
                    <label for="ticketText">Explanation:</label>
                    <textarea id="ticketText" class="form-control" rows="5" @bind="_newTicket.Text"></textarea>
                </div>

                <button class="btn btn-primary" @onclick="CreateTicket">Create Ticket</button>
            </div>
        </div>
    }

    <button class="btn btn-secondary mt-3" @onclick="NavigateToEvent">Back to event</button>
</div>

@code {
    [Parameter]
    public Guid RegistrationId { get; set; }
    [Parameter]
    public Guid EventId { get; set; }
    
    private List<TicketDto>? _tickets;
    
    private bool _allTicketsSolved;

    private TicketDto _newTicket = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshTickets();
    }

    private async Task RefreshTickets()
    {
        try
        {
            _tickets = await Http.GetFromJsonAsync<List<TicketDto>>($"Registration/{RegistrationId}/ticket");
            _allTicketsSolved = _tickets.All(t => t.Solved);
        }
        catch (Exception e)
        {
            ToastService.ShowError("Something went wrong, please try again later");
        }
    }

    private async Task CreateTicket()
    {
        if (!string.IsNullOrWhiteSpace(_newTicket.Title) && !string.IsNullOrWhiteSpace(_newTicket.Text))
        {
            var request = new TicketRequest()
            {
                Title = _newTicket.Title,
                Text = _newTicket.Text
            };
            
            try
            {
                var response = await Http.PostAsJsonAsync($"Registration/{RegistrationId}/ticket", request);
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Ticket created");
                    await RefreshTickets();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception e)
            {
                ToastService.ShowError("Something went wrong, please try again later");
            }
            _newTicket = new TicketDto();
        }
    }

    private void NavigateToEvent()
    {
        NavigationManager.NavigateTo($"event-detail/{EventId}");
    }
}
