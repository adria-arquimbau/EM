@page "/Check-in/{RegistrationId:guid}"

@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Modals
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService ToastService
@inject HttpClient Http

@attribute [Authorize(Roles = "Organizer, Staff")]

<h3 class="mb-3">Check Inn</h3>

@if (_registrationToCheckInn == null)
{
    <LoadingSpinner />
}
else
{
   <div class="card">
         <div class="card-header">
             <div class="text-center">
                 <h1 class="display-1 d-inline" style="font-size: 8em;">Bib: </h1>
                 <h1 class="display-1 d-inline" style="font-size: 10em;">@_registrationToCheckInn.Bib</h1>
             </div>
         </div>
         @if(_registrationToCheckInn.CheckedIn)
         {
             <div class="alert alert-danger" role="alert">
                 WARNING: This registration is already checked in.
             </div>
         }
         <div class="card-body">
             <p class="card-text">
                 User name: @_registrationToCheckInn.RegisteredUser.UserName<br/>
                 Email: @_registrationToCheckInn.RegisteredUser.Email<br/>
                 Phone Number: @_registrationToCheckInn.RegisteredUser.PhoneNumber <br/>
                 Role: @_registrationToCheckInn.Role <br/>
                 Registration State: @_registrationToCheckInn.State <br/>
                 Checked In: @_registrationToCheckInn.CheckedIn <br/>
                 @if (!_registrationToCheckInn.IsFreeEvent)
                 {
                     <p>Payment Status: @_registrationToCheckInn.PaymentStatus / @_registrationToCheckInn.AmountPaid €</p> <br/>
                 }
                  @if (_registrationToCheckInn.IsFreeEvent)
                  {
                      <p>Payment Status: FREE EVENT </p> <br/>
                  }
                 Registration Date: @_registrationToCheckInn.CreationDate.ToLocalTime().ToLongDateString() at @_registrationToCheckInn.CreationDate.ToLocalTime().ToShortTimeString() <br/>
             </p>
             @if (!_registrationToCheckInn.CheckedIn)
             {
                 <button class="btn btn-success" @onclick="() => CheckInOut(true)">Check In</button>
             }
             else
             {
                 <button class="btn btn-danger" @onclick="() => CheckInOut(false)">Check Out</button>
             }

         </div>
    </div>
}

<ConfirmationModal 
    Title="Confirmation" 
    Message="Are you sure you want to change the state of the registration?" 
    ConfirmationChanged="ConfirmCheckInOut" 
    Visible="_showConfirmationModal">
</ConfirmationModal>

@code {
    [Parameter]
    public Guid? RegistrationId { get; set; }

    private RegistrationToCheckInDto? _registrationToCheckInn;
    
    private bool _showConfirmationModal = false;
    private bool _checkInConfirmation;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            try
            {
                var response = await Http.GetAsync($"Registration/{RegistrationId}/Check-in");

                if (response.IsSuccessStatusCode)
                {
                    _registrationToCheckInn = await response.Content.ReadFromJsonAsync<RegistrationToCheckInDto>();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(errorContent, settings => settings.DisableTimeout = true);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }

        if (!isAuthenticated)
        {
            ToastService.ShowError("You must be authenticated and a member of the event staff to access this page.", settings => settings.DisableTimeout = true);
        }
    }
    
    private void CheckInOut(bool checkIn)
    {
        _checkInConfirmation = checkIn;
        _showConfirmationModal = true;
    }

    private async Task ConfirmCheckInOut(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                var response = await Http.PostAsync($"Registration/{RegistrationId}/check-in/{_checkInConfirmation}", null);

                if (response.IsSuccessStatusCode)
                {
                    _registrationToCheckInn.CheckedIn = _checkInConfirmation;
                    ToastService.ShowSuccess(_checkInConfirmation ? "Checked in successfully" : "Checked out successfully");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(errorContent);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }
        _showConfirmationModal = false;
    }
}
