@using System.Text
@using System.Text.Json
@using EventsManager.Shared.Dtos
@using Microsoft.AspNetCore.Authorization

@inject HttpClient Http

@attribute [Authorize(Roles = "User")]

<h4>Basic information</h4>

@RenderButtons

<img class="user-image-picture" src="@($"{User.ImageUrl}")" alt="User image" />
<form>
    <div class="mb-3">
        <label class="form-label">Email</label>
        <input type="email" class="form-control" value="@User.Email" readonly />
    </div>
    <div class="mb-3">
        <label class="form-label">User name</label>
        <input type="text" class="form-control" value="@User.UserName" readonly />
    </div>
    <div class="mb-3">
        <label class="form-label">Phone number</label>
        <input type="text" class="form-control" @bind="@User.PhoneNumber" readonly="@ReadOnly" />
    </div>
    <div class="mb-3">
        <label class="form-label">Name</label>
        <input type="text" class="form-control" @bind="@User.Name" readonly="@ReadOnly" />
    </div>
    <div class="mb-3">
        <label class="form-label">Family name</label>
        <input type="text" class="form-control" @bind="@User.FamilyName" readonly="@ReadOnly" />
    </div>
    <div class="mb-3">
        <label class="form-label">Address</label>
        <input type="text" class="form-control" @bind="@User.Address" readonly="@ReadOnly" />
    </div>
    <div class="mb-3">
        <label class="form-label">City</label>
        <input type="text" class="form-control" @bind="@User.City" readonly="@ReadOnly" />
    </div>
    <div class="mb-3">
        <label class="form-label">Country</label>
        <input type="text" class="form-control" @bind="@User.Country" readonly="@ReadOnly" />
    </div>
    <div class="mb-3">
        <label class="form-label">Postal code</label>
        <input type="text" class="form-control" @bind="@User.PostalCode" readonly="@ReadOnly" />
    </div>
</form>

@RenderButtons

@code { 
    [Parameter]
    public UserDto? User { get; set; }

    private bool ReadOnly { get; set; } = true;

    private void SwitchToEditMode()
    {
        ReadOnly = false;
    }

    private async Task CancelEdit()
    {
        User = await Http.GetFromJsonAsync<UserDto>("User");
        ReadOnly = true;
    }

    private async Task SaveAccountInformation()
    {
        User.RequestingUpdate = true;
        var userToString = JsonSerializer.Serialize(User);
        await Http.PutAsync("User", new StringContent(userToString, Encoding.UTF8, "application/json"));
        User.RequestingUpdate = false;
        ReadOnly = true;
    }

    private RenderFragment RenderButtons => builder =>
    {
        if (ReadOnly)
        {
            builder.OpenElement(0, "button");
            builder.AddAttribute(1, "class", "btn btn-primary");
            builder.AddAttribute(2, "onclick", EventCallback.Factory.Create(this, SwitchToEditMode));
            builder.AddContent(3, "Edit");
            builder.CloseElement();
        }
        else
        {
            builder.OpenElement(0, "button");
            builder.AddAttribute(1, "class", "btn btn-primary");
            builder.AddAttribute(2, "onclick", EventCallback.Factory.Create(this, SaveAccountInformation));
            builder.AddContent(3, "Save");
            builder.CloseElement();

            builder.OpenElement(4, "button");
            builder.AddAttribute(5, "class", "btn btn-secondary");
            builder.AddAttribute(6, "onclick", EventCallback.Factory.Create(this, CancelEdit));
            builder.AddContent(7, "Cancel");
            builder.CloseElement();
        }
    };
}
