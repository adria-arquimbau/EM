@using EventsManager.Shared.Dtos
@using System.Text.Json
@using System.Text

@inject HttpClient Http
@inject NavigationManager NavManager

<input type="text" class="form-control" placeholder="Search..." @oninput="OnSearch" />

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">User Name</th>
                <th scope="col">Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in filteredUsers)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<p>Total: <strong>@numResults results found</strong></p>

@code {
    List<UserDto> users = new List<UserDto>();
    List<UserDto> filteredUsers = new List<UserDto>();
    int numResults = 0;
    string selectedUserId = "";

    protected override async Task OnInitializedAsync()
    {
        await GetAllUsers();
    }
    
    private void OnSearch(ChangeEventArgs e)
    {
        var value = e.Value.ToString().ToLower();
        filteredUsers = users.Where(user => user.UserName.ToLower().Contains(value) || user.Email.ToLower().Contains(value)).ToList();
        numResults = filteredUsers.Count;
        StateHasChanged();
    }

    private async Task GetAllUsers()
    {
        var response = await Http.GetFromJsonAsync<List<UserDto>>("User/all-users");
        users = response;
        numResults = users.Count;
        filteredUsers = new List<UserDto>(users); // Here, filteredUsers is set to the full list of users
    }

    private async Task ConfirmEmail(string idToConfirm)
    {
        var request = JsonSerializer.Serialize(new ConfirmEmailDto
        {
            IdToConfirm = idToConfirm
        });
        await Http.PutAsync($"User/confirm-email", new StringContent(request, Encoding.UTF8, "application/json"));
        await GetAllUsers();
    }
    
    private async Task DeleteUser(string idToDelete)
    {
        await Http.DeleteAsync($"User/{idToDelete}");
        await GetAllUsers();
    }
}   