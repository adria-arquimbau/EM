@using EventsManager.Shared.Dtos

@inject HttpClient Http
@inject NavigationManager NavManager

<div style="height: 434px; overflow:auto;" tabindex="-1">
    <FluentDataGrid RowsDataProvider="foodRecallProvider" Virtualize="true" GenerateHeader="GenerateHeaderOption.Sticky" TGridItem="UserDto" >
        <PropertyColumn Title="User name" Property="@(c => c!.UserName)" />
        <PropertyColumn Title="Email" Property="@(c => c!.Email)" />
    </FluentDataGrid>
</div>

<p>Total: <strong>@numResults results found</strong></p>

@code {
    GridItemsProvider<UserDto> foodRecallProvider = default!;
    int numResults;

    protected override async Task OnInitializedAsync()
    {
        // Define the GridRowsDataProvider. Its job is to convert QuickGrid's GridRowsDataProviderRequest into a query against
        // an arbitrary data soure. In this example, we need to translate query parameters into the particular URL format
        // supported by the external JSON API. It's only possible to perform whatever sorting/filtering/etc is supported
        // by the external API.
        foodRecallProvider = async req =>
        {
            var response = await Http.GetFromJsonAsync<List<UserDto>>("User/all-users");
            numResults = response.Count;
            return GridItemsProviderResult.From(
                items: response,
                totalItemCount: response.Count);
        };
        
    }
}