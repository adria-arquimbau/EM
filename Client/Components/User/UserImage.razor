@using EventsManager.Shared.Dtos
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using EventsManager.Shared

@inject HttpClient Http
@inject AuthenticationStateProvider authenticationStateProvider

@attribute [Authorize(Roles = "User")] 

<div class="user-image-container">
    @if (UserImageUrl == null)
    {
        <InputFile OnChange="@OnInputFileChange"/>
        
        <ul>
            <li>
                File: @fileName
                <span>
                    Stored File Name: @GetStoredFileName(fileName)
                </span>
            </li>
        </ul>
        
    }
    @if (UserImageUrl != null)
    {
        <img size="" src="@UserImageUrl" alt="Event image" height="200" width="200"/>

        @if (!RequestingDeleteImage)
        {
            <div>
                <FluentButton Appearance="Appearance.Accent" @onclick="DeleteImage">Delete image</FluentButton>
            </div>
        }
        else
        {
            <div>
                <FluentButton Disabled="true" Appearance="Appearance.Accent" @onclick="DeleteImage">Deleteting</FluentButton>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public Uri? UserImageUrl { get; set; } 
    
    [Parameter]
    public EventCallback RefreshUserInformation { get; set; }
    
    private int maxAllowedFiles = 1;
    private long maxFileSize = long.MaxValue;
    private string fileName;
    private UploadResult uploadResult = new();
    
    private bool RequestingDeleteImage; 

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();
        var file = e.GetMultipleFiles(maxAllowedFiles).First();
      
        var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
        
        fileName = file.Name;
        content.Add(content: fileContent, name: "\"file\"", fileName: file.Name);
        
        var response = await Http.PostAsync("User/image", content);
        var newUploadResult = await response.Content.ReadFromJsonAsync<UploadResult>();
        if (newUploadResult != null)
        {
            uploadResult = newUploadResult;
        }
        await RefreshUserInformation.InvokeAsync();
    }

    private string? GetStoredFileName(string fileName)
    {
        if (uploadResult != null)
        {
            return uploadResult.StoredFileName;
        }
        return "FIle not found.";
    }
    
    private async Task DeleteImage()    
    {
        RequestingDeleteImage = true;
        await Http.DeleteAsync("User/image");
        await RefreshUserInformation.InvokeAsync();
        RequestingDeleteImage = false;
    }   
}
