@using EventsManager.Shared.Dtos
@inject HttpClient Http

<h3>My events</h3>

@if (myEvents is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (var sportEvent in myEvents)
        {
            <div class="col-sm-12 col-md-6 col-lg-4 mb-4">
                <div class="card h-100">
                    <div style="height: 15rem; overflow: hidden;">
                        <img src="@sportEvent.ImageUrl" class="card-img-top img-fluid" alt="@sportEvent.Name"/>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@sportEvent.Name</h5>
                        <p class="card-text">@sportEvent.Description</p>
                        <p class="card-text"><small class="text-muted">Location: @sportEvent.Location</small></p>
                        <!-- ... rest of your event details here ... -->
                    </div>
                    <div class="card-footer">
                        <!-- ... rest of your footer here ... -->
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(sportEvent.Id)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showConfirmDeleteModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => showConfirmDeleteModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this event?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showConfirmDeleteModal = false">No</button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteEvent(eventToDeleteId)">Yes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private bool showConfirmDeleteModal = false;
    private Guid eventToDeleteId;
    [Parameter] 
    public List<MyEventDto>? myEvents { get; set; }

    protected override async Task OnInitializedAsync()
    {
        myEvents = await Http.GetFromJsonAsync<List<MyEventDto>>("Event/my-events");
    }

    private void ConfirmDelete(Guid eventId)
    {
        eventToDeleteId = eventId;  
        showConfirmDeleteModal = true;  
    }

    private async Task DeleteEvent(Guid eventId)
    {
        await Http.DeleteAsync($"Event/{eventId}");
        showConfirmDeleteModal = false;
        myEvents = await Http.GetFromJsonAsync<List<MyEventDto>>("Event/my-events");
    }
}
