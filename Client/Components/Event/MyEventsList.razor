@using EventsManager.Shared.Dtos
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>My events</h3>

@if (MyEvents is null)
{
    <LoadingSpinner />
}
else
{
    <div class="row">
        @foreach (var sportEvent in MyEvents)
        {
            <div class="col-sm-12 col-md-6 col-lg-4 mb-4">
                <div class="card h-100">
                    <div class="clickable"  @onclick="() => NavigateToEventDetail(sportEvent.Id)" style="height: 15rem; overflow: hidden;">
                        @if (sportEvent.ImageUrl != null)
                        {
                            <img src="@sportEvent.ImageUrl" class="card-img-top img-fluid clickable" @onclick="() => NavigateToEventDetail(sportEvent.Id)" alt="@sportEvent.Name"/>
                        }
                        else
                        {
                            <div style="height: 15rem;"></div>
                        }
                    </div>
                    <div class="card-body clickable"  @onclick="() => NavigateToEventDetail(sportEvent.Id)">
                        <h5 class="card-title">@sportEvent.Name</h5>
                          <p class="card-text">@sportEvent.Description</p>
                          <p class="card-text"><small class="text-muted">Location: @sportEvent.Location</small></p>
                          <p class="card-text"><small class="text-muted">Start date: @sportEvent.StartDate.ToShortDateString()</small></p>
                          <p class="card-text"><small class="text-muted">End date: @sportEvent.FinishDate.ToShortDateString()</small></p>
                          <p class="card-text"><small class="text-muted">Open registrations: @sportEvent.OpenRegistrationsDate.ToShortDateString()</small></p>
                          <p class="card-text"><small class="text-muted">Close registrations: @sportEvent.CloseRegistrationsDate.ToShortDateString()</small></p>
                        <p class="card-text"><small class="text-muted">Max Registrations: @sportEvent.MaxRegistrations</small></p>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">
                            @if (sportEvent.IsPublic)
                            {
                                <span class="text-success">Public <i class="bi bi-check-circle-fill"></i></span>
                            }
                            else
                            {
                                <span class="text-danger">Private <i class="bi bi-x-circle-fill"></i></span>
                            }
                        </small>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(sportEvent.Id)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (_showConfirmDeleteModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => _showConfirmDeleteModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this event?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _showConfirmDeleteModal = false">No</button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteEvent(_eventToDeleteId)">Yes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private bool _showConfirmDeleteModal = false;
    private Guid _eventToDeleteId;
    [Parameter] 
    public List<MyEventDto>? MyEvents { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MyEvents = await Http.GetFromJsonAsync<List<MyEventDto>>("Event/my-events");
    }

    private void ConfirmDelete(Guid eventId)
    {
        _eventToDeleteId = eventId;  
        _showConfirmDeleteModal = true;  
    }

    private async Task DeleteEvent(Guid eventId)
    {
        await Http.DeleteAsync($"Event/{eventId}");
        _showConfirmDeleteModal = false;
        MyEvents = await Http.GetFromJsonAsync<List<MyEventDto>>("Event/my-events");
    }
    
    private void NavigateToEventDetail(Guid eventId)
    {
        NavigationManager.NavigateTo($"/event-detail-organizer/{eventId}");
    }
}
