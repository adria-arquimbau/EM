@using EventsManager.Shared.Dtos
@inject HttpClient Http

<div class="card">
    <div class="card-header">
        <h3>Registration Passwords</h3>
    </div>
    <div class="card-body">
        @foreach(var role in roles)
        {
            <div class="form-group">
                <label>@role.Label</label>
                @if(isEditing)
                {
                    <input type="text" class="form-control" @bind="role.Password" />
                }
                else
                {
                    <input type="password" class="form-control" value=@role.Password readonly />
                    <button class="btn btn-secondary btn-sm" @onclick="() => role.ShowPassword = !role.ShowPassword">
                        @if (role.ShowPassword)
                        {
                            @:Hide Password
                        }
                        else
                        {
                            @:Show Password
                        }
                    </button>
                    @if(role.ShowPassword)
                    {
                        <div class="alert alert-info mt-2">
                            @role.Password
                        </div>
                    }
                }
            </div>
        }
        @if (isEditing)
        {
            <button class="btn btn-success mt-3" @onclick="Save">Save</button>
            <button class="btn btn-danger mt-3" @onclick="CancelEditing">Cancel</button>
        }
        else
        {
            <button class="btn btn-primary mt-3" @onclick="StartEditing">Edit Passwords</button>
        }
    </div>
</div>

@code {
    [Parameter]
    public MyEventDto? MyEventDto { get; set; }
    
    bool isEditing = false;
    
    [Parameter]
    public EventCallback RefreshEvent { get; set; }
    
    private List<RolePassword> roles = new();

    protected override void OnParametersSet()
    {
        roles = new List<RolePassword>
        {
            new RolePassword { Label = "Rider Registration Password", Password = MyEventDto?.RiderRegistrationPassword },
            new RolePassword { Label = "Staff Registration Password", Password = MyEventDto?.StaffRegistrationPassword },
            new RolePassword { Label = "Marshall Registration Password", Password = MyEventDto?.MarshallRegistrationPassword },
            new RolePassword { Label = "Rider Marshall Registration Password", Password = MyEventDto?.RiderMarshallRegistrationPassword },
        };
    }
    
    private async Task Save()
    {
        MyEventDto.StaffRegistrationPassword = roles.Single(x => x.Label == "Staff Registration Password").Password;
        MyEventDto.RiderRegistrationPassword = roles.Single(x => x.Label == "Rider Registration Password").Password;
        MyEventDto.MarshallRegistrationPassword = roles.Single(x => x.Label == "Marshall Registration Password").Password;
        MyEventDto.RiderMarshallRegistrationPassword = roles.Single(x => x.Label == "Rider Marshall Registration Password").Password;
        await Http.PutAsJsonAsync($"Event/update-registration-passwords", MyEventDto);
        CancelEditing();
        await RefreshEvent.InvokeAsync();
    }

    private void StartEditing()
    {
        isEditing = true;
    }

    private void CancelEditing()
    {
        isEditing = false;
    }

    public class RolePassword
    {
        public string Label { get; set; }
        public string? Password { get; set; }
        public bool ShowPassword { get; set; } = false;
    }
}
