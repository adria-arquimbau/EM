@using EventsManager.Shared.Dtos
@using System.Net.Http.Headers
@using System.Net.Http.Json

@inject HttpClient Http

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-9">
                <h3>@Event.Name</h3>
            </div>
            <div class="col-md-3 text-end">
                <button class="btn btn-primary" @onclick="() => ToggleEditMode.InvokeAsync()">Edit</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="row">
            <div class="col-md-4">
                <img  src="@($"{Event.ImageUrl}?v={imageUpdateCount}")" alt="Event Image" class="img-fluid my-2 mx-auto d-block" style="max-width: 200px;"/>
                @if (Event.ImageUrl != null)
                {
                    <div class="user-image-manage-button">
                        <FluentButton Appearance="Appearance.Accent" @onclick="DeleteImage">Delete image</FluentButton>
                    </div>
                }
                @if (Event.ImageUrl == null)
                {
                    <InputFile OnChange="UploadImage" accept="image/png, image/jpeg"/>
                }
                @ErrorMessage
            </div>
        </div>
        <div class="col-md-8">
            <ul class="list-group list-group-flush">
                <li class="list-group-item"><strong>Description:</strong> @Event.Description</li>
                <li class="list-group-item"><strong>Location:</strong> @Event.Location</li>
                <li class="list-group-item"><strong>Max Registrations:</strong> @Event.MaxRegistrations</li>
                <li class="list-group-item"><strong>Is Public:</strong> @Event.IsPublic</li>
                <li class="list-group-item"><strong>Open Registrations Date:</strong> @Event.OpenRegistrationsDate</li>
                <li class="list-group-item"><strong>Close Registrations Date:</strong> @Event.CloseRegistrationsDate</li>
                <li class="list-group-item"><strong>Start Date:</strong> @Event.StartDate</li>
                <li class="list-group-item"><strong>Finish Date:</strong> @Event.FinishDate</li>
                <li class="list-group-item"><strong>Creation Date:</strong> @Event.CreationDate</li>
                <li class="list-group-item"><strong>Pre-registrations:</strong> @Event.PreRegistrationsCount</li>
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public MyEventDto Event { get; set; }
    
    private string? ErrorMessage = null;
    
    private int imageUpdateCount = 0;

    [Parameter]
    public EventCallback ToggleEditMode { get; set; }
    
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        
    // Validate file format
        string[] permittedTypes = { "image/jpeg", "image/png", "image/gif" };
        if (!permittedTypes.Contains(imageFile.ContentType))
        {
            ErrorMessage = "Only JPEG, JPG, PNG and GIF images are allowed.";
            return;
        }

    // Resize image if necessary - Blazor does not provide native resizing capability. You may use JavaScript interop to perform image resizing before upload if required.

    // Upload image
        var ms = new MemoryStream();
        await imageFile.OpenReadStream().CopyToAsync(ms);
        
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
        var streamContent = new StreamContent(new MemoryStream(ms.ToArray()));
        streamContent.Headers.ContentType = new MediaTypeHeaderValue(imageFile.ContentType);
        content.Add(streamContent, "file", imageFile.Name);
        
        await Http.PostAsync($"Event/{Event.Id}/image", content);
        imageUpdateCount++;
        Event = await Http.GetFromJsonAsync<MyEventDto>($"Event/{Event.Id}-organizer");
    }   
    
    private async Task DeleteImage()    
    {
        await Http.DeleteAsync($"Event/{Event.Id}/image");
        imageUpdateCount++;
        Event = await Http.GetFromJsonAsync<MyEventDto>($"Event/{Event.Id}-organizer");
    }   
}
