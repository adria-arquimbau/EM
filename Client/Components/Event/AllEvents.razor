<style>
    .image-container {
        height: 200px;
        width: 100%;
        overflow: hidden;
    }
    .image-container img {
        width: 100%;
        height: auto;
    }
</style>

@using EventsManager.Shared.Dtos
@using System.Dynamic

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<FluentCalendar Readonly="true" SelectedDates="_calendarEventsDates"/>

<h3>Next Events</h3>

<div class="row">
    <div class="col-sm-12 col-md-4 col-lg-3">
        <input type="text" class="form-control mb-3" placeholder="Search..." @oninput="UpdateSearchTerm" />
    </div>
</div>

@if (_events == null)
{
    <LoadingSpinner />
}
else
{
    @if (FilteredEvents.Any())
    {
        <div class="row">
            @foreach (var sportEvent in FilteredEvents)
            {
                <div class="col-sm-6 col-md-4 col-lg-3">
                    <div class="card mb-4 clickable" @onclick="(() => NavigateToEventDetail(sportEvent.Id))">
                        <div class="image-container">
                            @if (sportEvent.ImageUrl != null)
                            {
                                <img src="@sportEvent.ImageUrl" alt="@sportEvent.Name">
                            }
                            else
                            {
                                <div style="width: 100%; height: 100%;"></div>
                            }
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@sportEvent.Name</h5>
                            <p class="card-text">@sportEvent.Description</p>
                        </div>
                        <div class="card-footer">
                            <small class="text-muted">@sportEvent.StartDate.ToString("g")</small>
                            <div>@sportEvent.Location</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No events available.</p>
    }
}



@code {
    private List<EventDto>? _events;
    private List<DateOnly> _calendarEventsDates = new();
    private string? _searchTerm = string.Empty;

    private IEnumerable<EventDto> FilteredEvents
    {
        get
        {
            return _events?.Where(e => e.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var http = HttpClientFactory.CreateClient("EventsManager.ServerAPI.Anonymous");
            _events = await http.GetFromJsonAsync<List<EventDto>>("Event");
        
            _calendarEventsDates = _events.Select(e => new DateOnly(e.StartDate.Year, e.StartDate.Month, e.StartDate.Day)).Distinct().ToList();
            
            if (_events == null)
            {
                ToastService.ShowError("Failed to retrieve events. Please try again later.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("An error occurred while retrieving events. Error: " + ex.Message);
        }
    }

    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString();
    }
    
    private void NavigateToEventDetail(Guid eventId)
    {
        NavigationManager.NavigateTo($"/event-detail/{eventId}");
    }
}   
