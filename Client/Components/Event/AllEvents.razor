<style>
    .image-container {
        height: 200px;
        width: 100%;
        overflow: hidden;
    }
    .image-container img {
        width: 100%;
        height: auto;
    }
</style>

@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Loaders
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3>Next Events</h3>

<div class="row">
    <div class="col-sm-12 col-md-4 col-lg-3">
        <input type="text" class="form-control mb-3" placeholder="Search..." @oninput="UpdateSearchTerm" />
    </div>
</div>

@if (Events == null)
{
    <LoadingSpinner />
}
else
{
    <div class="row">
        @foreach (var sportEvent in FilteredEvents)
        {
            <div class="col-sm-6 col-md-4 col-lg-3">
                <div class="card mb-4 clickable" @onclick="(() => NavigateToEventDetail(sportEvent.Id))">
                    <div class="image-container">
                        @if (sportEvent.ImageUrl != null)
                        {
                            <img src="@sportEvent.ImageUrl" alt="@sportEvent.Name">
                        }
                        else
                        {
                            <div style="width: 100%; height: 100%;"></div>
                        }
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@sportEvent.Name</h5>
                        <p class="card-text">@sportEvent.Description</p>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">@sportEvent.StartDate.ToString("g")</small>
                        <div>@sportEvent.Location</div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@inject IToastService toastService
<button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("I'm an INFO message"))">Info Toast</button>
<button class="btn btn-success" @onclick="@(() => toastService.ShowSuccess("I'm a SUCCESS message with a custom title"))">Success Toast</button>
<button class="btn btn-warning" @onclick="@(() => toastService.ShowWarning("I'm a WARNING message"))">Warning Toast</button>
<button class="btn btn-danger" @onclick="@(() => toastService.ShowError("I'm an ERROR message"))">Error Toast</button>

@code {
    private List<EventDto> Events;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient("EventsManager.ServerAPI.Anonymous");
        Events = await http.GetFromJsonAsync<List<EventDto>>("Event");
    }

    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
    }

    private IEnumerable<EventDto> FilteredEvents => Events
        .Where(e => e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    
    private void NavigateToEventDetail(Guid eventId)
    {
        NavigationManager.NavigateTo($"/event-detail/{eventId}");
    }
}
