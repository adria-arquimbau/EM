@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Modals

@inject HttpClient Http
@inject IToastService ToastService

@if (!string.IsNullOrEmpty(_warningMessage))
{
    <div class="alert alert-warning">
        @_warningMessage
    </div>
}

<input type="text" class="form-control" placeholder="Search..." @oninput="OnSearch" />

@if (string.IsNullOrWhiteSpace(_searchTerm))
{
    <p><em>Start typing to search for a user...</em></p>
}
else if (_filteredUsers == null || !_filteredUsers.Any())
{
    <p><em>No results found...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">User Name</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in _filteredUsers)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>
                        @if(user.IsOwner)
                        {
                            <p>This user is an Owner</p>
                            <button class="btn btn-danger" @onclick="() => StartDeleteOwner(user)">Delete Owner</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => SetOwner(user)">Set as Owner</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Owners List</h2>
<table class="table">
    <thead>
    <tr>
        <th scope="col">User Name</th>
        <th scope="col">Action</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var user in _currentOwners)
    {
        <tr>
            <td>@user.UserName</td>
            <td>
                <button class="btn btn-danger" @onclick="() => StartDeleteOwner(user)">Delete Owner</button>
            </td>
        </tr>
    }
    </tbody>
</table>

<ConfirmationModal Title="Confirmation" Message="@_confirmationMessage"
                   Visible="_showConfirmation" ConfirmationChanged="HandleConfirmation">
</ConfirmationModal>

@code {
    [Parameter]
    public MyEventDto? MyEventDto { get; set; }
    [Parameter]
    public EventCallback RefreshEvent { get; set; }

    private List<UserDtoToSetASOwner>? _users;
    private List<UserDtoToSetASOwner>? _filteredUsers = new List<UserDtoToSetASOwner>();
    private List<UserDtoToSetASOwner> _currentOwners = new List<UserDtoToSetASOwner>();
    private bool _showConfirmation;
    private UserDtoToSetASOwner _selectedUser;
    private string _confirmationMessage;
    private bool _isDeleteAction;
    private string _searchTerm = string.Empty;
    private string _warningMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetAllUsers();
    }

    private async Task GetAllUsers()
    {
        var response = await Http.GetFromJsonAsync<List<UserDtoToSetASOwner>>($"User/all-users-to-set-owner/event/{MyEventDto.Id}");
        _users = response;
        OnSearchUsers();
    }

    private void SetOwner(UserDtoToSetASOwner user)
    {
        _selectedUser = user;
        _confirmationMessage = "Are you sure you want to set this user as the owner?";
        _isDeleteAction = false;
        _showConfirmation = true;    
    }

    private void StartDeleteOwner(UserDtoToSetASOwner user)
    {
        _selectedUser = user;
        _confirmationMessage = "Are you sure you want to delete this owner?";
        _isDeleteAction = true;
        _showConfirmation = true;
    }

    private async Task HandleConfirmation(bool confirmed)
    {   
        if (confirmed)
        {
            if (_isDeleteAction)
            {
                try
                {
                    var response = await Http.DeleteAsync($"Event/{MyEventDto.Id}/owner/{_selectedUser.Id}");

                    if (response.IsSuccessStatusCode)
                    {
                        _warningMessage = "Owner was deleted, but the staff role is still active.";

                    }
                    if (!response.IsSuccessStatusCode)
                    {
                        var errorMessage = await response.Content.ReadAsStringAsync();
                        ToastService.ShowError(errorMessage);
                    }
                }
                catch (Exception)
                {
                    ToastService.ShowError("An error occurred while deleting the price.");
                }
            }
            else
            {
                var response = await Http.PutAsync($"Event/{MyEventDto.Id}/set-owner/{_selectedUser.Id}", null);
                if (response.IsSuccessStatusCode)
                {
                    _warningMessage = string.Empty;

                }
                if (!response.IsSuccessStatusCode)
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(errorMessage);
                }
                await GetAllUsers();
            }
            
        }
        await GetAllUsers();
        _showConfirmation = false;
    }

    private void OnSearch(ChangeEventArgs e)
    {
        _searchTerm = e.Value.ToString().ToLower();
        OnSearchUsers();
    }

    private void OnSearchUsers()
    {
        _filteredUsers = !string.IsNullOrWhiteSpace(_searchTerm) ? _users.Where(user => user.UserName.ToLower().Contains(_searchTerm)).ToList() : new List<UserDtoToSetASOwner>();
        _currentOwners = _users.Where(user => user.IsOwner).ToList();
    }
}
