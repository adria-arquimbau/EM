@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Modals

@inject HttpClient Http

<h3>OwnersManager</h3>

<input type="text" class="form-control" placeholder="Search..." @oninput="OnSearch" />

@if (_users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">User Name</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in filteredUsers)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>
                        @if(user.IsOwner)
                        {
                            <p>This user is an Owner</p>
                            <button class="btn btn-danger" @onclick="() => StartDeleteOwner(user)">Delete Owner</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => SetOwner(user)">Set as Owner</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<ConfirmationModal Title="Confirmation" Message="@confirmationMessage"
                   Visible="showConfirmation" ConfirmationChanged="HandleConfirmation">
</ConfirmationModal>

@code {
    [Parameter]
    public MyEventDto? MyEventDto { get; set; }
    [Parameter]
    public EventCallback RefreshEvent { get; set; }

    private List<UserDtoToSetASOwner>? _users;
    private List<UserDtoToSetASOwner>? filteredUsers;
    private bool showConfirmation;
    private UserDtoToSetASOwner selectedUser;
    private string confirmationMessage;
    private bool isDeleteAction;

    protected override async Task OnInitializedAsync()
    {
        await GetAllUsers();
    }

    private async Task GetAllUsers()
    {
        var response = await Http.GetFromJsonAsync<List<UserDtoToSetASOwner>>($"User/all-users-to-set-owner/event/{MyEventDto.Id}");
        _users = response;
        filteredUsers = new List<UserDtoToSetASOwner>(_users);
    }

    private void SetOwner(UserDtoToSetASOwner user)
    {
        selectedUser = user;
        confirmationMessage = "Are you sure you want to set this user as the owner?";
        isDeleteAction = false;
        showConfirmation = true;    
    }

    private void StartDeleteOwner(UserDtoToSetASOwner user)
    {
        selectedUser = user;
        confirmationMessage = "Are you sure you want to delete this owner?";
        isDeleteAction = true;
        showConfirmation = true;
    }

    private async Task HandleConfirmation(bool confirmed)
    {   
        if (confirmed)
        {
            if (isDeleteAction)
            {
                await Http.DeleteAsync($"Event/{MyEventDto.Id}/owner/{selectedUser.Id}");
                Console.WriteLine("Owner was deleted, but the staff role is still active.");
            }
            else
            {
                await Http.PutAsync($"Event/{MyEventDto.Id}/set-owner/{selectedUser.Id}", null);
            }
            await RefreshEvent.InvokeAsync();
        }
        await GetAllUsers();
        showConfirmation = false;
    }

    private void OnSearch(ChangeEventArgs e)
    {
        var value = e.Value.ToString().ToLower();
        filteredUsers = _users.Where(user => user.UserName.ToLower().Contains(value)).ToList();
    }
}
