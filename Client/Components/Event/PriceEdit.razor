@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Modals
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<h3>PriceEdit</h3>

<ConfirmationModal Title="Confirmation" Message="Are you sure you want to remove this price?" 
                   Visible="@confirmModalVisible" ConfirmationChanged="OnConfirmationChanged" />

<EditForm Model="MyEventDto" class="mt-4">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row">
            @if (MyEventDto?.Prices != null && MyEventDto.Prices.Count > 0)
            {
                foreach (var price in MyEventDto.Prices)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">
                                    Price: 
                                    @if (price.Price is 0 or null)
                                    {
                                        <span>FREE</span>
                                    }
                                    else
                                    {
                                        <span>@price.Price €</span>
                                    }
                                </h5>
                                <p class="card-text text-muted">Start: @price.StartDate.ToString("MM/dd/yyyy") - End: @price.EndDate.ToString("MM/dd/yyyy")</p>
                                <button class="btn btn-danger" @onclick="(() => ConfirmRemovePrice(price))">Remove</button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <p>No prices yet. Add one below.</p>
                </div>
            }

            <div class="col-12 mt-4">
                <button class="btn btn-primary" @onclick="OpenModal">Add Price</button>
            </div>
        </div>
    </div>
</EditForm>

<div class="@modalClass">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Price</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <InputNumber @bind-Value="newPrice.Price" class="form-control mb-2" placeholder="Price (leave empty for free)" />
                <InputDate @bind-Value="newPrice.StartDate" class="form-control mb-2" placeholder="Start Date" />
                <InputDate @bind-Value="newPrice.EndDate" class="form-control mb-2" placeholder="End Date" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddPrice">Add</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public MyEventDto? MyEventDto { get; set; }
    [Parameter]
    public EventCallback RefreshEvent { get; set; }
    
    private EventPriceDto newPrice = new();
    private EventPriceDto priceToRemove; // Store the price to remove after confirmation

    private bool isModalOpen = false;
    private bool confirmModalVisible = false; // Confirmation modal state
    private string modalClass => isModalOpen ? "modal d-block" : "modal";

    private void OpenModal()
    {
        newPrice = new EventPriceDto
        {
            EventId = MyEventDto.Id
        };
        isModalOpen = true;
    }

    private async void AddPrice()
    {
        var response = await Http.PostAsJsonAsync("EventPrice", newPrice);

        if (response.IsSuccessStatusCode)
        {
            CloseModal();
            await RefreshEvent.InvokeAsync(MyEventDto);
        }
        else
        {
            // Handle the error here
        }
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    // Open the confirmation modal instead of removing directly
    private void ConfirmRemovePrice(EventPriceDto price)
    {
        priceToRemove = price;
        confirmModalVisible = true;
    }

    // Confirmation handler
    private async Task OnConfirmationChanged(bool confirmed)
    {
        if (confirmed)
        {
            await Http.DeleteAsync($"EventPrice/{priceToRemove.Id}");
            await RefreshEvent.InvokeAsync(MyEventDto);
        }

    // Reset state
        priceToRemove = null;
        confirmModalVisible = false;
    }
}
