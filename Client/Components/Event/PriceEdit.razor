@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Modals
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<ConfirmationModal Title="Confirmation" Message="Are you sure you want to remove this price?" 
                   Visible="@confirmModalVisible" ConfirmationChanged="OnConfirmationChanged" />

<EditForm Model="MyEventDto" class="mt-4">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row">
            @if (MyEventDto?.Prices is {Count: > 0 })
            {
                foreach (var price in MyEventDto.Prices)
                {
                    var now = DateTime.Now;
                    var cardClass = price.EndDate.ToLocalTime() < now ? "card border-danger" : 
                                    price.StartDate.ToLocalTime() <= now && price.EndDate.ToLocalTime() >= now ? "card border-success" : "card";
                    var endDateClass = price.EndDate.ToLocalTime() < now ? "text-danger" : 
                                       price.StartDate.ToLocalTime() <= now && price.EndDate.ToLocalTime() >= now ? "text-success" : "text-muted";
                    
                    <div class="col-md-4 mb-4">
                        <div class="@cardClass">
                            <div class="card-body">
                                <h5 class="card-title">
                                    Price: <span>@price.Price €</span>
                                </h5>
                                <p class="card-text @endDateClass">Start: @price.StartDate.ToLocalTime().ToString("dd/MM/yyyy HH:mm") - End: @price.EndDate.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</p>
                                @if (price.EndDate.ToLocalTime() < now)
                                {
                                    <p class="text-danger">This price has expired.</p>
                                }
                                @if (price.StartDate.ToLocalTime() <= now && price.EndDate.ToLocalTime() >= now)
                                {
                                    <p class="text-success">This price is currently active.</p>
                                }
                                <button class="btn btn-danger" @onclick="(() => ConfirmRemovePrice(price))">Remove</button>
                                <button class="btn btn-secondary" @onclick="(() => OpenEditModal(price))">Edit</button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <p>No prices yet. Add one below.</p>
                </div>
            }

            <div class="col-12 mt-4">
                <button class="btn btn-primary" @onclick="OpenModal">Add Price</button>
            </div>
        </div>
    </div>
</EditForm>

<!-- Edit Modal -->

<div class="@editModalClass">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Price</h5>
                <button type="button" class="close" @onclick="CloseEditModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <InputNumber @bind-Value="editPrice.Price" class="form-control mb-2" placeholder="Price" min="1"/>
                @if (!string.IsNullOrEmpty(_editErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @_editErrorMessage
                    </div>
                }
                <input type="datetime-local" @bind="editPrice.StartDate" class="form-control mb-2" placeholder="Start Date" />
                <input type="datetime-local" @bind="editPrice.EndDate" class="form-control mb-2" placeholder="End Date" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="UpdatePrice">Update</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="@modalClass">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Price</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <InputNumber @bind-Value="newPrice.Price" class="form-control mb-2" placeholder="Price" min="1"/>
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @_errorMessage
                    </div>
                }
                <input type="datetime-local" @bind="newPrice.StartDate" class="form-control mb-2" placeholder="Start Date" />
                <input type="datetime-local" @bind="newPrice.EndDate" class="form-control mb-2" placeholder="End Date" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddPrice">Add</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public MyEventDto? MyEventDto { get; set; }
    [Parameter]
    public EventCallback RefreshEvent { get; set; }
    
    private EventPriceDto newPrice = new();
    private EventPriceDto editPrice = new(); // Added for edit
    private EventPriceDto priceToRemove;
    
    private bool isModalOpen = false;
    private bool isEditModalOpen = false; // Added for edit
    private bool confirmModalVisible = false;
    private string modalClass => isModalOpen ? "modal d-block" : "modal";
    private string editModalClass => isEditModalOpen ? "modal d-block" : "modal"; // Added for edit
    private string? _errorMessage = null;
    private string? _editErrorMessage = null; // Added for edit

    private void OpenModal()
    {
        newPrice = new EventPriceDto
        {
            EventId = MyEventDto.Id,
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddDays(7)
        };
        isModalOpen = true;
    }
    
    private void OpenEditModal(EventPriceDto price)
    {
        editPrice = new EventPriceDto
        {
            Id = price.Id,
            EventId = price.EventId,
            Price = price.Price,
            StartDate = price.StartDate,
            EndDate = price.EndDate
        };
        isEditModalOpen = true;
    }
    
    private async void AddPrice()
    {
        if (newPrice.Price < 0.5m)
        {
            _errorMessage = "Price must be greater than 0,5.";
        }
        else
        {
            var response = await Http.PostAsJsonAsync("EventPrice", newPrice);
            if (response.IsSuccessStatusCode)
            {
                CloseModal();
                await RefreshEvent.InvokeAsync(MyEventDto);
            }
            else
            {
                // Handle the error here
            }
        }
    }
    
    private async void UpdatePrice()
    {
        if (editPrice.Price <  0.5m)
        {
            _editErrorMessage = "Price must be greater than 0,5.";
        }
        else
        {
            var response = await Http.PutAsJsonAsync($"EventPrice/{editPrice.Id}", editPrice);
            if (response.IsSuccessStatusCode)
            {
                CloseEditModal();
                await RefreshEvent.InvokeAsync(MyEventDto);
            }
            else
            {
                // Handle the error here
            }
        }
    }
    
    private void CloseModal()
    {
        isModalOpen = false;
    }
    
    private void CloseEditModal()
    {
        isEditModalOpen = false;
    }
    
    private void ConfirmRemovePrice(EventPriceDto price)
    {
        priceToRemove = price;
        confirmModalVisible = true;
    }
    
    private async Task OnConfirmationChanged(bool confirmed)
    {
        if (confirmed)
        {
            await Http.DeleteAsync($"EventPrice/{priceToRemove.Id}");
            await RefreshEvent.InvokeAsync(MyEventDto);
        }
        priceToRemove = null;
        confirmModalVisible = false;
    }
}
