@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.ImageUploader
@using EventsManager.Client.Components.Loaders
@using EventsManager.Client.Components.Modals
@using System.Net.Http.Headers
@using System.Net.Http.Json

@inject HttpClient Http


<div class="card">
    <div class="card-header bg-primary text-white">
        <div class="d-flex justify-content-between align-items-center">
            <h3>@Event?.Name</h3>
            <button class="btn btn-light" @onclick="() => ToggleEditMode.InvokeAsync()">Edit</button>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="card mb-3">
                    @if (Event?.ImageUrl != null)
                    {
                        <img src="@($"{Event.ImageUrl}?v={_imageUpdateCount}")" alt="Event Image" class="img-fluid"/>
                    }
                    <ImageUploader RefreshInformation="RefreshEventData" EventId="@Event?.Id" Type="ImageUploader.ImageType.Event" ImageUrl="@Event?.ImageUrl"/>
                </div>
                @if(!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @_errorMessage
                    </div>
                }
            </div>
            <div class="col-md-8">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"><strong>Id:</strong> @Event?.Id</li>
                    <li class="list-group-item"><strong>Description:</strong> @Event?.Description</li>
                    <li class="list-group-item"><strong>Location:</strong> @Event?.Location</li>
                    <li class="list-group-item"><strong>Max Registrations:</strong> @Event?.MaxRegistrations</li>
                    <li class="list-group-item"><strong>Is Public:</strong> @Event?.IsPublic</li>
                    <li class="list-group-item"><strong>Is Free:</strong> @Event?.IsFree</li>
                    <li class="list-group-item"><strong>Open Registrations Date:</strong> @Event?.OpenRegistrationsDate</li>
                    <li class="list-group-item"><strong>Close Registrations Date:</strong> @Event?.CloseRegistrationsDate</li>
                    <li class="list-group-item"><strong>Start Date:</strong> @Event?.StartDate</li>
                    <li class="list-group-item"><strong>Finish Date:</strong> @Event?.FinishDate</li>
                    <li class="list-group-item"><strong>Creation Date:</strong> @Event?.CreationDate</li>
                    <li class="list-group-item"><strong>Riders Pre-registrations:</strong> @Event?.RidersPreRegistrationsCount</li>
                    <li class="list-group-item"><strong>Riders Accepted registrations:</strong> @Event?.RidersAcceptedRegistrationsCount</li>
                    <li class="list-group-item"><strong>Marshall Accepted registrations:</strong> @Event?.MarshallAcceptedRegistrationsCount</li>
                    <li class="list-group-item"><strong>Rider-Marshall Accepted registrations:</strong> @Event?.RiderMarshallAcceptedRegistrationsCount</li>
                    @foreach (var role in new[] 
                    {
                        ("Rider registration password", Event?.RiderRegistrationPassword),
                        ("Staff registration password", Event?.StaffRegistrationPassword),
                        ("Marshall registration password", Event?.MarshallRegistrationPassword),
                        ("Rider-Marshall registration password", Event?.RiderMarshallRegistrationPassword)
                    })
                    {
                        <li class="list-group-item">
                            <strong>@role.Item1:</strong> 
                            <span class="@(string.IsNullOrWhiteSpace(role.Item2) ? "text-danger" : "")">
                                @DisplayPassword(role.Item2)
                            </span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public MyEventDto? Event { get; set; }

    private string? _errorMessage = null;

    private int _imageUpdateCount = 0;

    private bool _showConfirmDeleteModal = false;
    private bool _requesting = false;
    private Guid _selectedEventId;
    
    [Parameter]
    public EventCallback ToggleEditMode { get; set; }
    
    private string[] _allowedImageFormats  = { "image/jpeg", "image/png", "image/gif", "image/jpg" };

    private string DisplayPassword(string password)
    {
        return string.IsNullOrWhiteSpace(password) ? "NO PASSWORD SET" : password;
    }   
    
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        if (!_allowedImageFormats.Contains(e.File.ContentType))
        {
            _errorMessage = "Only JPEG, JPG, PNG and GIF images are allowed.";
            return;
        }

        try 
        {
            _requesting = true;

    // Resize the image while maintaining the aspect ratio
            var image = await e.File.RequestImageFileAsync(e.File.ContentType, 300, int.MaxValue);
            
            await UploadFileToServer(image);
            await RefreshEventData();
        }
        catch (Exception ex) 
        {
            _errorMessage = "Error occurred while processing the image: " + ex.Message;
        }
        finally 
        {
            _requesting = false;
        }
    } 

    private async Task UploadFileToServer(IBrowserFile file)
    {
        using var content = new MultipartFormDataContent();

        var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 2097152));
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(content: fileContent, name: "\"file\"", fileName: file.Name);

        var response = await Http.PostAsync($"Event/{Event?.Id}/image", content);
        if (!response.IsSuccessStatusCode)
        {
            //ToastService.ShowError("Something went wrong while updating your image");
        }
        _imageUpdateCount++;
    }

    private async Task RefreshEventData()
    {
        try
        {
            Event = await Http.GetFromJsonAsync<MyEventDto>($"Event/{Event?.Id}-organizer");
        }
        catch (Exception)
        {
            //ToastService.ShowError("Something went wrong when retrieving your event information");
        }
        
        _imageUpdateCount++;
    }

    private void PromptDelete(Guid id)
    {
        _selectedEventId = id;
        _showConfirmDeleteModal = true;
    }

    private async Task ConfirmDelete(bool confirmed)
    {
        _showConfirmDeleteModal = false;

        if (confirmed)
        {
            await DeleteImage(_selectedEventId);
        }
    }

    private async Task DeleteImage(Guid id)
    {
        _requesting = true;
        await Http.DeleteAsync($"Event/{id}/image");
        _imageUpdateCount++;
        await RefreshEventData();
        _requesting = false;
    }
}
