@using EventsManager.Shared.Requests
@inject HttpClient Http
@inject IToastService ToastService

<h3>Create Event</h3>

<EditForm Model="_createEventRequest" OnValidSubmit="CreateEventCall">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Event Name:</label>
        <InputText class="form-control" @bind-Value="_createEventRequest.Name" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputTextArea class="form-control" @bind-Value="_createEventRequest.Description" />
    </div>

    <div class="form-group">
        <label>Location:</label>
        <InputText class="form-control" @bind-Value="_createEventRequest.Location" />
    </div>

    <div class="form-group">
        <label>Max Registrations:</label>
        <InputNumber class="form-control" @bind-Value="_createEventRequest.MaxRegistrations" />
    </div>

    <div class="form-group">
        <label>Start Date:</label>
        <InputDate class="form-control" @bind-Value="_createEventRequest.StartDate" format="dd MMM yyyy" />
    </div>

    <div class="form-group">
        <label>Finish Date:</label>
        <InputDate class="form-control" @bind-Value="_createEventRequest.FinishDate" format="dd MMM yyyy" />
    </div>

    <div class="form-group">
        <label>Open Registrations Date:</label>
        <InputDate class="form-control" @bind-Value="_createEventRequest.OpenRegistrationsDate" format="dd MMM yyyy" />
    </div>

    <div class="form-group">
        <label>Close Registrations Date:</label>
        <InputDate class="form-control" @bind-Value="_createEventRequest.CloseRegistrationsDate" format="dd MMM yyyy" />
    </div>
    
    <div class="form-group">
        <label>Is a free event:</label>
        <InputCheckbox @bind-Value="_createEventRequest.IsFree" class="form-check-input my-2"/>
    </div>
    
    @if (!_createEventRequest.IsFree)
    {
        <div class="form-group">
            <label>Starting price:</label>
            <InputNumber class="form-control" @bind-Value="_createEventRequest.FirstPrice" />
        </div>
    }
    
    <button type="submit" class="btn btn-primary">Create Event</button>
</EditForm>

@code {
    private CreateEventRequest _createEventRequest = new()
    {
        StartDate = DateTime.Now,
        FinishDate = DateTime.Now.AddDays(7),
        OpenRegistrationsDate = DateTime.Now,
        CloseRegistrationsDate = DateTime.Now.AddDays(7), 
        FirstPrice = 1
    };

    private async Task CreateEventCall()
    {
        var response = await Http.PostAsJsonAsync("Event", _createEventRequest);
        
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadAsStringAsync();
            ToastService.ShowError(error);
        }
        if (response.IsSuccessStatusCode)
        {
            await OnEventCreated.InvokeAsync(true);
        }
        
    }

    [Parameter]
    public EventCallback<bool> OnEventCreated { get; set; }
}
