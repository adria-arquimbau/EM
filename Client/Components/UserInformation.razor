@using EventsManager.Shared
@using System.Net
@using System.Text
@using System.Text.Json
@using EventsManager.Shared.Dtos

@inject HttpClient Http
@inject AuthenticationStateProvider authenticationStateProvider

@if (user != null)
{
    <h3>My basic information</h3>
    <FluentSwitch ValueChanged="_ => AllowEdit()">
        Edit
    </FluentSwitch>
    <div class="basic-info-container">
        <div class="basic-info-field">
            <FluentTextField Appearance="Appearance.Filled" Disabled="Disabled" Size="GetEmailSize()" Readonly="true" Value="@user.Email">Email</FluentTextField>
        </div>
        
        <div class="basic-info-field">
            <FluentTextField Appearance="Appearance.Filled" Disabled="Disabled" Readonly="true" Value="@user.UserName">User name</FluentTextField>
        </div>
        
        <div class="basic-info-field">
            <FluentTextField Appearance="TextFieldAppearance" Readonly="ReadOnly" Placeholder="Name" Value="@user.Name" ValueChanged="v => user.Name = v">Name</FluentTextField>
        </div>
        
        <div class="basic-info-field">
            <FluentTextField Appearance="TextFieldAppearance" Readonly="ReadOnly" Placeholder="Family name" Value="@user.FamilyName" ValueChanged="v => user.FamilyName = v">Family name</FluentTextField>
        </div>
        
        <div class="basic-info-field">
            <FluentTextField Appearance="TextFieldAppearance" Readonly="ReadOnly" Placeholder="Address" Value="@user.Address" ValueChanged="v => user.Address = v" >Address</FluentTextField>
        </div>
        
        <div class="basic-info-field">
            <FluentTextField Appearance="TextFieldAppearance" Readonly="ReadOnly" Placeholder="City" Value="@user.City" ValueChanged="v => user.City = v">City</FluentTextField>
        </div>
        
        <div class="basic-info-field">
            <FluentTextField Appearance="TextFieldAppearance" Readonly="ReadOnly" Placeholder="Country" Value="@user.Country" ValueChanged="v => user.Country = v">Country</FluentTextField>
        </div>
        
        <div class="basic-info-field">
            <FluentTextField Appearance="TextFieldAppearance" Readonly="ReadOnly" Placeholder="Postal code" Value="@user.PostalCode" ValueChanged="v => user.PostalCode = v">Postal code</FluentTextField>
        </div>
    </div>
}

@code {
    private UserDto? user { get; set; }

    private bool ReadOnly { get; set; } = true;
    private bool Disabled { get; set; } = false;
    private Appearance TextFieldAppearance { get; set; } = Appearance.Filled;
        
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            user = await Http.GetFromJsonAsync<UserDto>("User");
        }
    }

    private int GetEmailSize()
    {
        return user!.Email.Length + 2;
    }

    private async Task SaveAccountInformation()
    {
        user!.RequestingUpdate = true;
        var userToString = JsonSerializer.Serialize(user);
        await Http.PutAsync("User", new StringContent(userToString, Encoding.UTF8, "application/json"));
        user.RequestingUpdate = false;
    }

    private async Task AllowEdit()
    {
        if (ReadOnly == false)
        {
            await SaveAccountInformation();
        }
        ReadOnly = !ReadOnly;
        TextFieldAppearance = ReadOnly ? Appearance.Filled : Appearance.Outline;
        Disabled = !Disabled;
    }   
}   
    