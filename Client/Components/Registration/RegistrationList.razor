@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Enums
@using EventsManager.Shared.Requests
@using EventsManager.Client.Components.ConfirmationModal
@inject HttpClient Http

@if (registrations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ConfirmationModal Message="Are you sure you want to delete this registration?" Visible="@showConfirmModal" ConfirmationChanged="ConfirmDelete" />

    <input type="search" placeholder="Search by user name" @oninput="HandleSearchInput" />

    <table class="table">
        <thead>
        <tr>
            <th>Creation Date</th>
            <th>Role</th>
            <th>State</th>
            <th>Bib</th>
            <th>Checked In</th>
            <th>User Name</th>
            <th>User Email</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var registration in registrations)
        {
            <tr>
                <td>@registration.CreationDate</td>
                <td>@registration.Role</td>
                <td>
                    <select value="@registration.State" @onchange="((e) => UpdateRegistrationState(registration, e))">
                        @foreach (RegistrationState state in Enum.GetValues(typeof(RegistrationState)))
                        {
                            <option value="@state" selected="@(state == registration.State)">@state</option>
                        }
                    </select>
                </td>
                <td>@registration.Bib</td>
                <td>@registration.CheckedIn</td>
                <td>@registration.RegisteredUser.UserName</td>
                <td>@registration.RegisteredUser.Email</td>
                <td>
                    <button class="btn btn-danger" @onclick="(() => PromptDelete(registration.Id))">Delete</button>
                </td>
            </tr>
        }

        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid? EventId { get; set; }
    
    private bool showConfirmModal = false;
    private Guid selectedRegistrationId;

    private List<RegistrationDto> registrations;

    protected override async Task OnInitializedAsync()
    {
        await LoadRegistrations();
    }

    private async Task LoadRegistrations(string? search = null)
    {
        registrations = await Http.GetFromJsonAsync<List<RegistrationDto>>($"Event/{EventId}/registrations?search={search}");
    }

    private async Task HandleSearchInput(ChangeEventArgs e)
    {
        await LoadRegistrations(e.Value.ToString());
    }
    
    private void PromptDelete(Guid id)
    {
        selectedRegistrationId = id;
        showConfirmModal = true;
    }
    
    private async Task ConfirmDelete(bool confirmed)
    {
        showConfirmModal = false;

        if (confirmed)
        {
            await DeleteRegistration(selectedRegistrationId);
        }
    }

    private async Task DeleteRegistration(Guid id)
    {
        await Http.DeleteAsync($"Registration/{id}");
        
        await LoadRegistrations();
    }
    
    private async Task UpdateRegistrationState(RegistrationDto registration, ChangeEventArgs e)
    {
        RegistrationState newState;
    
        if(Enum.TryParse(e.Value.ToString(), out newState))
        {
            registration.State = newState;
        
            var updateRequest = new RegistrationUpdateRequest
            {
                Id = registration.Id,
                State = newState,
                Bib = registration.Bib,
                CheckedIn = registration.CheckedIn
            };

            await Http.PutAsJsonAsync($"Registration", updateRequest);
        
            await LoadRegistrations();
        }
    }
}